<!DOCTYPE html>
<html>

<head>
    <title>Encoder Status</title>
    <script src="/jquery3.6.0.min.js"></script>

</head>

<body>

    <table border=1>
        <tr>
            <td>Calculated Alt Step per Revolution <br> (if last two syncs were alt only move)</td>
            <td><span id="calculateAltEncoderStepsPerRevolution">0</span></td>
            <td>Calculated Az Step per Revolution <br> (if last two syncs were azi only move)</td>
            <td><span id="calculateAzEncoderStepsPerRevolution">0</span></td>
        </tr>
        <tr>
            <td>Actual Alt Step per Revolution</td>
            <td><span id="actualAltEncoderStepsPerRevolution">0</span></td>
            <td>Actual Az Step per Revolution</td>
            <td><span id="actualAzEncoderStepsPerRevolution">0</span></td>
        </tr>

        <tr>
            <td>

            </td>
            <td>
                <button id="saveAltEncoderSteps">Save Calculated Alt Encoder Steps</button>
            </td>
            <td>

            </td>
            <td>
                <button id="saveAzEncoderSteps">Save Calculated Az Encoder Steps</button>
            </td>
        </tr>
    </table>

    <table border="1">
        <tr>
            <td id="platformConnected">
                <a id="eqPlatformLink" href="#" style="text-decoration: none; color: inherit;">EQ Platform Connected</a>
            </td>

            <td id="platformTracking">
                <a id="trackingLink" href="#" style="text-decoration: none; color: inherit;">EQ Platform Tracking</a>
            </td>
        </tr>
        <tr>
            <td>Time in minutes to middle</td>
            <td><span id="timeToMiddle">0</span></td>
        </tr>
        <tr>
            <td>Time in minutes to end of run</td>
            <td><span id="timeToEnd">0</span></td>
        </tr>

    </table>




    <!-- Alignment Table -->
    Base Alignments
    <table border="1" id="alignmentDataTable">
        <thead>
            <tr>
                <th>Time</th>
                <th>RA</th>
                <th>Dec</th>
                <th>Alt</th>
                <th>Az</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be inserted here via JavaScript -->
        </tbody>
    </table>
    <br>Last sync points, newest first
    <table border="1" id="lastAlignmentDataTable">
        <thead>
            <tr>
                <th>Time</th>
                <th>RA</th>
                <th>Dec</th>
                <th>Alt</th>
                <th>Az</th>
                <th>Error</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be inserted here via JavaScript -->
        </tbody>
    </table>

    <button id="clearPreferences">Clear Preferences</button>
    <br>
    <button id="clearAlignment">Clear saved alignment</button>
    <br>
    Run this after : <br>
    - Power on <br>
    - Centering platform <br>
    - Setting lat long time thorugh planetarium <br>

    <button id="performZeroedAlignment">Perform Zeroed Alignment</button>

    <br>
    <canvas id="skyCanvas" width="400" height="400"></canvas>


    <br>

    <script>
        var lastAlignmentTimestamp = "";

        function computeXY(alt, az, MULTIPLIER, CENTER) {
            let r = (90 - alt) * MULTIPLIER;
            let x = CENTER + r * Math.sin(az * Math.PI / 180);
            let y = CENTER - r * Math.cos(az * Math.PI / 180);
            return { x, y };
        }

        function renderSky(data) {
            var canvas = document.getElementById("skyCanvas");
            var ctx = canvas.getContext("2d");

            // Clear the canvas every time
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Constants for conversion
            const MULTIPLIER = canvas.width / 200; // assuming canvas width = canvas height
            const CENTER = canvas.width / 2;

            // Draw horizon circle (alt=0)
            ctx.beginPath();
            ctx.arc(CENTER, CENTER, 90 * MULTIPLIER, 0, 2 * Math.PI);
            ctx.strokeStyle = "black";
            ctx.stroke();

            // Draw black dot at azimuth (top center)
            ctx.beginPath();
            ctx.arc(CENTER, CENTER - (90 * MULTIPLIER), 2, 0, 2 * Math.PI);
            ctx.fillStyle = "black";
            ctx.fill();

            // Draw points from baseAlignmentSynchPoints array
            for (let i = 0; i < data.baseAlignmentSynchPoints.length; i++) {
                let syncPoint = data.baseAlignmentSynchPoints[i];

                let { x, y } = computeXY(syncPoint.alt, syncPoint.az,MULTIPLIER,CENTER);

                ctx.beginPath();
                ctx.arc(x, y, 2, 0, 2 * Math.PI);
                ctx.fillStyle = "red";
                ctx.fill();

                if (i > 0) {
                    let prevSyncPoint = data.baseAlignmentSynchPoints[i - 1];


                    let { x: prevX, y: prevY } = computeXY(prevSyncPoint.alt, prevSyncPoint.az,MULTIPLIER, CENTER);

                    ctx.beginPath();
                    ctx.moveTo(prevX, prevY);
                    ctx.lineTo(x, y);
                    ctx.strokeStyle = "red";
                    ctx.stroke();
                }

                // Close the triangle if it's the third point
                if (i === 2) {
                    let firstSyncPoint = data.baseAlignmentSynchPoints[0];
                    let { x: firstX, y: firstY } = computeXY(firstSyncPoint.alt, firstSyncPoint.az, MULTIPLIER, CENTER);


                    ctx.beginPath();
                    ctx.moveTo(x, y);
                    ctx.lineTo(firstX, firstY);
                    ctx.strokeStyle = "red";
                    ctx.stroke();
                }
            }

            // Draw lastSyncPoint
            let { x, y } = computeXY(data.lastSyncPoint.alt, data.lastSyncPoint.az, MULTIPLIER, CENTER);

            ctx.beginPath();
            ctx.arc(x, y, data.lastSyncPoint.error * MULTIPLIER, 0, 2 * Math.PI);
            ctx.strokeStyle = "blue";
            ctx.stroke();
        }




        function fetchAlignmentData() {
            $.getJSON("/getAlignmentData").done(function (data) {
                var tableBody = $("#lastAlignmentDataTable tbody");

                // Add 'lastSyncPoint' data to the table
                var row = $("<tr>");
                row.append($("<td>").text(data.lastSyncPoint.time));
                row.append($("<td>").text(data.lastSyncPoint.ra));
                row.append($("<td>").text(data.lastSyncPoint.dec));
                row.append($("<td>").text(data.lastSyncPoint.alt));
                row.append($("<td>").text(data.lastSyncPoint.az));
                row.append($("<td>").text(data.lastSyncPoint.error));
                tableBody.prepend(row);

                tableBody = $("#alignmentDataTable tbody");
                tableBody.empty(); // Clear any existing data

                // Now add each of the alignment points from 'baseAlignmentSynchPoints'
                for (var i = 0; i < data.baseAlignmentSynchPoints.length; i++) {
                    var syncPoint = data.baseAlignmentSynchPoints[i];
                    row = $("<tr>");
                    row.append($("<td>").text(syncPoint.time));
                    row.append($("<td>").text(syncPoint.ra));
                    row.append($("<td>").text(syncPoint.dec));
                    row.append($("<td>").text(syncPoint.alt));
                    row.append($("<td>").text(syncPoint.az));
                    tableBody.append(row);
                }
                renderSky(data);
            }).fail(function () {
                console.error("Failed to fetch alignment data.");
            });
        }



        function update() {
            console.log("Update ");

            $.getJSON("/getScopeStatus").done(function (data) {

                $("#calculateAltEncoderStepsPerRevolution").text(data.calculateAltEncoderStepsPerRevolution);
                $("#calculateAzEncoderStepsPerRevolution").text(data.calculateAzEncoderStepsPerRevolution);
                $("#actualAltEncoderStepsPerRevolution").text(data.actualAltEncoderStepsPerRevolution);
                $("#actualAzEncoderStepsPerRevolution").text(data.actualAzEncoderStepsPerRevolution);
                $("#timeToMiddle").text(data.timeToMiddle);

                $("#platformConnected").css("background-color", data.platformConnected ? "green" : "red");
                if (data.platformConnected) {
                    $("#eqPlatformLink").attr("href", "http://" + data.eqPlatformIP).text("EQ Platform Connected");
                    if (data.platformTracking) {
                        $("#trackingLink").attr("href", "/trackingOff").text("Tracking Is On");
                    } else {
                        $("#trackingLink").attr("href", "/trackingOn").text("Tracking Is Off");
                    }
                } else {
                    $("#eqPlatformLink").removeAttr("href").text("EQ Platform Not Connected");
                    $("#trackingLink").removeAttr("href").text("");
                }

                $("#platformTracking").css("background-color", data.platformTracking ? "green" : "red");
                if (data.lastAlignmentTimestamp !== lastAlignmentTimestamp) {
                    lastAlignmentTimestamp = data.lastAlignmentTimestamp;
                    fetchAlignmentData();
                }
            }).fail(function () {
                console.error("Failed to get data.");
            });


        };

        $("#clearPreferences").click(function () {
            $.post("/clearPreferences");
        });

        $("#clearAlignment").click(function () {
            $("#lastAlignmentDataTable tbody").empty();
            $("#alignmentDataTable tbody").empty();
            $.post("/clearAlignment");
        });

        $("#performZeroedAlignment").click(function () {
            $.post("/performZeroedAlignment");
        });

        $("#saveAltEncoderSteps").click(function () {
            $.post("/saveAltEncoderSteps");
        });

        $("#saveAzEncoderSteps").click(function () {
            $.post("/saveAzEncoderSteps");
        });





        setInterval(update, 1000);
    </script>
</body>

</html>